import time
import requests
from selenium.common import TimeoutException, StaleElementReferenceException
from selenium.webdriver import Keys, ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


class DiscordAPI:
    def __init__(self, base_url, headers, channel_id):
        self.base_url = base_url
        self.headers = headers
        self.channel_id = channel_id

    def send_message(self, content):
        data = {"content": content}
        response = requests.post(
            f"{self.base_url}/channels/{self.channel_id}/messages",
            headers=self.headers,
            json=data
        )
        return response

    def send_message_with_attachment(self, content, file_path):
        data = {"content": content}
        with open(file_path, "rb") as file:
            files = {
                "files[0]": ("winter.png", file, "image/png")
            }
            response = requests.post(
                f"{self.base_url}/channels/{self.channel_id}/messages",
                headers=self.headers,
                data=data,
                files=files
            )
        return response

    def add_reaction(self, message_id, emoji):
        url = f"{self.base_url}/channels/{self.channel_id}/messages/{message_id}/reactions/{emoji}/@me"
        response = requests.put(url, headers=self.headers)
        return response

    def delete_reaction(self, message_id, emoji):
        url = f"{self.base_url}/channels/{self.channel_id}/messages/{message_id}/reactions/{emoji}/@me"
        response = requests.delete(url, headers=self.headers)
        return response

    def delete_message(self, message_id):
        url = f"{self.base_url}/channels/{self.channel_id}/messages/{message_id}"
        response = requests.delete(url, headers=self.headers)
        return response

    def get_message(self, limit=10, before_id=None):
        params = {"limit": limit, "before_id": before_id}
        url = f"{self.base_url}/channels/{self.channel_id}/messages"
        response = requests.delete(url, headers=self.headers, params=params)
        return response


class DiscordPage:
    def __init__(self, driver):
        self.driver = driver

    time.sleep(1)

    def login(self, email, password):
        email_input = self.driver.find_element(By.NAME, "email")
        password_input = self.driver.find_element(By.NAME, "password")
        email_input.send_keys(email)
        # time.sleep(2)
        password_input.send_keys(password)
        login_button = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[div[text()='–í—Ö–æ–¥']]"))
        )
        login_button.click()

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
        WebDriverWait(self.driver, 10).until(
            EC.url_contains("channels")
        )

    def last_message_locator(self):
        return By.XPATH, "//li[starts-with(@id, 'chat-messages')][last()]"

    # def last_message_locator(self):
    #     return By.XPATH, "//div[starts-with(@id,'message-content') and contains(@class,'messageContent_f9f2ca')]//span"

    def last_message(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º * –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∫–æ—Ä—Ç–µ–∂–∞ –∏–∑ last_message_locator
        return self.driver.find_element(*self.last_message_locator())

    def hover(self, element):
        action = ActionChains(self.driver)
        action.move_to_element(element).perform()
        action.context_click(element).perform()

    def select_server(self):
        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä "–°–µ—Ä–≤–µ—Ä –î–∏–ø–ª–æ–º"
        server_icon = WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located(
                (By.XPATH, "//div[@class='childWrapper_f90abb childWrapperNoHoverBg_f90abb acronym_f90abb']"))
        )
        server_icon.click()

    def select_channel(self):
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª "#3"
        channel = WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//a[@data-list-item-id='channels___1286673494603731044']"))
        )
        channel.click()
        # time.sleep(5)

    def send_message_ch3(self, message_text):
        message_box = WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.XPATH,
                                            "//div[@class ='markup_f8f345 editor_a552a6 slateTextArea_e52116 fontSize16Padding_bdf0de']"))
        )
        message_box.click()
        message_box.send_keys(message_text + Keys.ENTER)

    def delete_message_ch3(self):
        #–ù–∞—Ö–æ–¥–∏–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        last_message = self.last_message()
        self.hover(last_message)
        # –ù–∞—Ö–æ–¥–∏–º –∏ –Ω–∞–∂–∏–º–∞–µ–º —É–¥–∞–ª–∏—Ç—å
        delete_button = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//div[@id='message-delete' and .='–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ']"))
        )
        # self.driver.find_element(
        # By.XPATH, "//div[@id='message-delete' and .='–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ']"))
        # action.move_to_element(delete_button).click().perform()
        # self.hover(delete_button)
        delete_button.click()
        # time.sleep(1)
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        confirm_button = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[@type='submit' and .//div[text()='–£–¥–∞–ª–∏—Ç—å']]")))
        confirm_button.click()

    def put_reaction_ch3(self):
        last_message = self.last_message()
        self.hover(last_message)
        reaction = WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located(
                (By.XPATH, "//div[@class='hoverBarButton_e986d9 button_f7e168' and @aria-label='–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é']"))
        )
        # reaction = self.driver.find_element(*reaction_element)
        reaction.click()
        thumb_sub = WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//*[@id='emoji-picker-grid-0-1']/button"))
        )
        # thumb_sub = self.driver.find_element(By.XPATH, "//*[@id='emoji-picker-grid-0-1']/button")
        thumb_sub.click()
        # time.sleep(2)

    def delete_reaction_ch3(self):
        # thumb_sub_to_delete_last_message_locator = self.driver.find_element(By.XPATH,
        thumb_sub_to_delete_last_message = WebDriverWait(self.driver, 20).until(
            EC.element_to_be_clickable(
                (By.XPATH, "//li[starts-with(@id, 'chat-messages')][last()]//img[@data-name='üëç']"))
        )
        thumb_sub_to_delete_last_message.click()

    def edit_message_ch3(self):
        last_message = self.last_message()
        self.hover(last_message)
        edit_button = WebDriverWait(self.driver, 20).until(
            EC.element_to_be_clickable((By.XPATH, "//div[@id='message-edit' and @role='menuitem']"))
        )
        edit_button.click()
        textbox_edit = WebDriverWait(self.driver, 20).until(
            EC.presence_of_element_located((By.XPATH, "//div[@role='textbox' and @contenteditable='true']"))
        )
        # textbox_edit.clear()
        # –í—ã–¥–µ–ª–∏–º –∏ —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç
        textbox_edit.send_keys(Keys.CONTROL + 'a')  # –í—ã–¥–µ–ª—è–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        textbox_edit.send_keys(Keys.BACKSPACE)  # –£–¥–∞–ª—è–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        new_text = "–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞! –° –ø–µ—Ä–≤—ã–º —Å–Ω–µ–≥–æ–º!"
        textbox_edit.send_keys(new_text)
        textbox_edit.send_keys(Keys.ENTER)

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏—à–∏ Enter
        # edit_input = WebDriverWait(self.driver, 10).until(
        #     EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'slateTextArea')]"))
        # )
        # edit_input.send_keys(Keys.RETURN)

    def get_text_last_message(self):
        last_message_element = self.last_message()
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = ''.join(
            span.text for span in last_message_element.find_elements(
                By.XPATH, ".//div[contains(@id,'message-content')]//span"
            )
        )
        return message_text.replace("(–∏–∑–º–µ–Ω–µ–Ω–æ)", "").strip()

    def is_emoji_present(self):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–º–æ–¥–∑–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located(
                    (By.XPATH, "//li[starts-with(@id, 'chat-messages')][last()]//img[@data-name='üëç']"))
            )
            return True
        except TimeoutException:
            return False
